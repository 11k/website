"use strict";!function(a){!function(){var r=a("#graph4"),t=moment(),o=a(r).find("h4"),e=a(r).find("canvas").get(0).getContext("2d"),n=new Chart(e,{type:"bar",data:{labels:[],datasets:[]},options:{maintainAspectRatio:!1,responsive:!0,scales:{xAxes:[{stacked:!0}],yAxes:[{ticks:{beginAtZero:!0},stacked:!0}]}}});o.on("click",".fa-arrow-left",function(){t.subtract(1,"months"),s(t)}).on("click",".fa-arrow-right",function(){t.add(1,"months"),s(t)});var s=function(r){var t=moment(r.format("YYYY-MM-DD")).startOf("month"),e=moment(r.format("YYYY-MM-DD")).endOf("month");o.html("Subscriptions <a href='#'><i class='fa fa-arrow-left'></i></a> "+e.format("MMMM YYYY")+" <a href='#'><i class='fa fa-arrow-right'></i></a>"),a.ajax({url:"/admin/chart/NewTieredSubscribersLastXDays.json?fromDate="+t.format("YYYY-MM-DD")+"&toDate="+e.format("YYYY-MM-DD"),success:function(a){for(var r=[],o=[],s=[],i=[],l=[],d=[],c=t;c.isBefore(e)||c.isSame(e);c.add(1,"days"))d.push(c.format("YYYY-MM-DD")),l.push(c.format("MM/D")),r.push(0),o.push(0),s.push(0),i.push(0);for(var b=0;b<a.length;++b){var p=d.indexOf(a[b].date);if(p!=-1)switch(a[b].subscriptionTier){case"1":r[p]=parseInt(a[b].total);break;case"2":o[p]=parseInt(a[b].total);break;case"3":s[p]=parseInt(a[b].total);break;case"4":i[p]=parseInt(a[b].total)}}n.data.labels=l,n.data.datasets=[{label:"Tier 1",data:r,borderWidth:.4,backgroundColor:"rgba(51, 122, 183,0.6)",borderColor:"rgba(51, 122, 183,1)",pointBorderColor:"rgba(51, 122, 183,1)",pointBackgroundColor:"rgba(51, 122, 183,1)"},{label:"Tier 2",data:o,borderWidth:.4,backgroundColor:"rgba(0,220,0,0.6)",borderColor:"rgba(0,220,0,1)",pointBorderColor:"rgba(0,220,0,1)",pointBackgroundColor:"#fff"},{label:"Tier 3",data:s,borderWidth:.4,backgroundColor:"rgba(220,0,0,0.6)",borderColor:"rgba(220,0,0,1)",pointBorderColor:"rgba(220,0,0,1)",pointBackgroundColor:"rgba(220,0,0,1)"},{label:"Tier 4",data:i,borderWidth:.4,backgroundColor:"rgba(220,0,220,0.6)",borderColor:"rgba(220,0,220,1)",pointBorderColor:"rgba(220,0,220,1)",pointBackgroundColor:"rgba(220,0,220,1)"}],n.update()}})};s(t)}(),function(){var r=14,t=a("#graph1"),o="Revenue Last "+r+" Days";a(t).find("h4").text(o),a.ajax({url:"/admin/chart/RevenueLastXDays.json?days="+r,success:function(e){e=GraphUtil.prepareGraphData(e,"sum",r,"days");var n=a(t).find("canvas").get(0).getContext("2d");new Chart(n,{type:"line",data:{labels:e.labels,datasets:[{label:o,borderWidth:.4,backgroundColor:"rgba(220,220,220,0.2)",borderColor:"rgba(220,220,220,1)",pointBorderColor:"rgba(220,220,220,1)",pointBackgroundColor:"#fff",pointBorderWidth:1,data:e.data}]},options:{maintainAspectRatio:!1,tooltips:{callbacks:{label:function(a){return GraphUtil.formatCurrency(a.yLabel)}}},scales:{yAxes:[{ticks:{beginAtZero:!0,callback:GraphUtil.formatCurrency}}]}}})}})}(),function(){var r=12,t=a("#graph2"),o="Revenue Last "+r+" Months";a(t).find("h4").text(o),a.ajax({url:"/admin/chart/RevenueLastXMonths.json?months="+r,success:function(e){e=GraphUtil.prepareGraphData(e,"sum",r,"months");var n=a(t).find("canvas").get(0).getContext("2d");new Chart(n,{type:"line",data:{labels:e.labels,datasets:[{label:o,borderWidth:.4,backgroundColor:"rgba(220,220,220,0.2)",borderColor:"rgba(220,220,220,1)",pointBorderColor:"rgba(220,220,220,1)",pointBackgroundColor:"#fff",pointBorderWidth:1,data:e.data}]},options:{maintainAspectRatio:!1,tooltips:{callbacks:{label:function(a){return GraphUtil.formatCurrency(a.yLabel)}}},scales:{yAxes:[{ticks:{beginAtZero:!0,callback:GraphUtil.formatCurrency}}]}}})}})}(),function(){var r=5,t=a("#graph3"),o="Revenue Last "+r+" Years";a(t).find("h4").text(o),a.ajax({url:"/admin/chart/RevenueLastXYears.json?years="+r,success:function(e){e=GraphUtil.prepareGraphData(e,"sum",r,"years");var n=a(t).find("canvas").get(0).getContext("2d");new Chart(n,{type:"line",data:{labels:e.labels,datasets:[{label:o,borderWidth:.4,backgroundColor:"rgba(220,220,220,0.2)",borderColor:"rgba(220,220,220,1)",pointBorderColor:"rgba(220,220,220,1)",pointBackgroundColor:"#fff",pointBorderWidth:1,data:e.data}]},options:{maintainAspectRatio:!1,tooltips:{callbacks:{label:function(a){return GraphUtil.formatCurrency(a.yLabel)}}},scales:{yAxes:[{ticks:{beginAtZero:!0,callback:GraphUtil.formatCurrency}}]}}})}})}()}(jQuery);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
